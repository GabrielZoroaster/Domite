<!DOCTYPE html>
<html>
	<head>
		<title>UI.JS</title>
		<style>
			* {
				font-family: monofur, arial;
			}
			[popover]::backdrop {
			  background: rgba(0, 0, 0, 0.5); /* Полупрозрачный чёрный фон */
			  backdrop-filter: blur(5px); /* Размытие фона */
			}
			body {
				padding: 20px;
			}
			ul.test {
				display: grid;
				gap: 6px;
				padding: 0px;
			}
			ul.test > li {
				display: grid;
				border: 1px solid #aaa;
				border-radius: 8px;
				grid-template-columns: 1fr 200px;
				overflow: hidden;
			}
			ul.test > li.ok {
				border-color: #080;
			}
			ul.test > li.fail {
				border-color: #e00;
			}
			ul.test > li > .title {
				padding: 10px;
				grid-area: 1/1/2/2;
			}
			ul.test > li > .result {
				padding: 10px;
				grid-area: 1/2/2/3;
				color: #fff;
				font-weight: bold;
				align-content: center;
				justify-content: center;
				display: grid;
			}
			ul.test > li.ok > .result {
				background-color: #080;
			}
			ul.test > li.fail > .result {
				background-color: #e00;
			}
		</style>
		<script type="module">
			import * as ui from '../lib/node.js'
			import {Node, $, AttributeMap, NodeLS, NodeIterator} from '../lib/node.js'
			Object.assign(globalThis, {Node, $, ui});

			function * Nodes(args){
				while(true) yield new Node(args);
			}

			function Eq([... arr], [... arr1]){
				if(arr.length === arr1.lenght){
					for(let i = 0; i < arr.length; i++)
						console.log([i, arr, arr1]);
						// if(arr[i] !== arr1[i])
							// return false;
					return true;
				} return false;
			}

			class Test extends Node {

				#title = new Node({class: 'title'});
				#result = new Node({class: 'result'});

				constructor(title, test){
					super({name: 'li'});
					this.#title.text = title;
					this.append(this.#title, this.#result);
					this.run(test);
				}

				run(test){
					try {
						test() ? this.ok() : this.fail();
					} catch(error){
						this.catch(error);
					}
				}

				ok(){
					this.class.add('ok');
					this.#result.text = 'OK';
				}

				fail(){
					this.class.add('fail');
					this.#result.text = 'Fail';
				}

				catch(error){
					this.class.add('fail');
					this.#result.text = error.message;
				}
			}

			class TestList extends Node {

				constructor(tests){
					super({name: 'ul', class: 'test'});
					this.addAll(tests);
				}

				addAll(tests){
					for(const [title, test] of Object.entries(tests))
						this.add(title, test);
				}

				add(title, test){
					this.append(new Test(title, test));
				}
			}

			const test = new TestList({
				"new Node()"(){
					const node = new Node();
					return node instanceof Node;
				},
				"node.tag"(){
					const node = new Node();
					return node.tag instanceof HTMLElement;
				},
				"node.tagName"(){
					const node = new Node({name: 'p'});
					return node.tagName === 'P';
				},
				"node.document"(){
					const node = new Node();
					return node.document === document;
				},
				"node.parent"(){
					const node = new Node();
					return node.parent === null;
				},
				"node.parent = node"(){
					const node = new Node();
					const node1 = new Node();
					node.parent = node1;
					return node.tag.parentNode === node1.tag;
				},
				"node.parent = document.body"(){
					const node = new Node();
					node.parent = document.body;
					return node.tag.parentNode === document.body;
				},
				"node.parent = null"(){
					const node = new Node();
					node.parent = document.body;
					node.parent = null;
					return node.tag.parentNode === null;
				},
				"node.prevNode"(){
					return (new Node()).prevNode === null;
				},
				"node.prevNode = node"(){
					const node = new Node();
					const node1 = new Node();
					node.parent = new Node();
					node.prevNode = node1;
					return node.tag.previousElementSibling === node1.tag;
				},
				"node.nextNode"(){
					return (new Node()).nextNode === null;
				},
				"node.nextNode = node"(){
					const node = new Node();
					const node1 = new Node();
					node.parent = new Node();
					node.nextNode = node1;
					return node.tag.nextElementSibling === node1.tag;
				},
				"node.hidden"(){
					return (new Node()).hidden === false;
				},
				"node.hidden = true"(){
					const node = new Node();
					node.hidden = true;
					return node.tag.hasAttribute('hidden');
				},
				"node.hidden = false"(){
					const node = new Node();
					node.hidden = true;
					node.hidden = false;
					return !node.tag.hasAttribute('hidden');
				},
				"node.class"(){
					return (new Node()).class instanceof DOMTokenList;
				},
				"node.class = 'name'"(){
					const node = new Node();
					node.class = 'name';
					return node.class.contains('name');
				},
				"node.class = []"(){
					const node = new Node();
					node.class = 'name';
					node.class = ['a', 'b'];
					return !node.class.contains('name')
						&& node.class.contains('a')
						&& node.class.contains('b')
					;
				},
				"node.style"(){
					const node = new Node();
					return node.style instanceof CSSStyleDeclaration;
				},
				"node.style = 'css'"(){
					const node = new Node();
					node.style = 'width: 100px; color: blue';
					return (node.style.width === '100px') && (node.style.color === 'blue');
				},
				"node.style = {}"(){
					const node = new Node();
					node.style = 'width: 100px; color: blue';
					node.style = {color: 'red', height: '10%'};
					return (node.style.height === '10%') && (node.style.color === 'red') && !node.style.width;
				},
				"node.css"(){
					return (new Node()).css instanceof StylePropertyMap;
				},
				"node.dataset"(){
					return (new Node()).dataset instanceof DOMStringMap;
				},
				"node.dataset = {}"(){
					const node = new Node();
					node.dataset = {user: '123', ID: 12};
					return (node.dataset.user === '123') && (node.dataset.ID === '12');
				},
				"node.attrs"(){
					return (new Node()).attrs instanceof AttributeMap;
				},
				"node.attrs = {}"(){
					const node = new Node();
					node.attrs = {id: 'apple', title: 'Any'};
					return (node.tag.id === 'apple') && (node.tag.title === 'Any');
				},
				"node.html"(){
					return (new Node()).html === '';
				},
				"node.html = ''"(){
					const node = new Node();
					node.html = '<p>123</p>';
					return node.tag.innerHTML === '<p>123</p>';
				},
				"node.text"(){
					return (new Node()).text === '';
				},
				"node.text = ''"(){
					const node = new Node();
					node.html = 'Apple';
					return node.tag.innerText === 'Apple';
				},
				"node.ls"(){
					return (new Node()).ls instanceof NodeLS;
				},
				"node.ls = node"(){
					const node = new Node();
					const node1 = new Node();
					node.ls = node1;
					return node.tag.firstChild === node1.tag;
				},
				"node.ls = element"(){
					const node = new Node();
					const tag1 = document.createElement('p');
					node.ls = tag1;
					return node.tag.firstChild === tag1;
				},
				"node.ls = {}"(){
					const node = new Node();
					node.ls = {name: 'i'};
					return node.tag.firstChild.tagName === 'I';
				},
				"node.ls = [node, element, {}]"(){
					const node = new Node();
					const node1 = new Node();
					const tag1 = document.createElement('p');
					const obj1 = {name: 'b'};
					node.ls = [node1, tag1, obj1];
					return (node.tag.children[0] === node1.tag)
						&& (node.tag.children[1] === tag1)
						&& (node.tag.children[2].tagName === 'B')
					;
				},
				"node.all"(){
					const node = new Node();
					return node.all instanceof NodeIterator;
				},
				"node.parentAll"(){
					const node = new Node({hidden: true});
					return node.parentAll instanceof NodeIterator;
				},
				"node.prevAll"(){
					const node = new Node({hidden: true});
					return node.prevAll instanceof NodeIterator;
				},
				"node.nextAll"(){
					const node = new Node({hidden: true});
					return node.nextAll instanceof NodeIterator;
				},
				"node.vp"(){
					const node = new Node();
					return node.vp instanceof DOMRect;
				},
				"node.abs"(){
					const node = new Node();
					return node.vp instanceof DOMRect;
				},
				"node.rel"(){
					const node = new Node();
					return node.vp;
				},
				"node.box"(){
					const node = new Node();
					return node.box;
				},
				"node.scr"(){
					const node = new Node();
					return node.src;
				},
				"node.on()"(){
				},
				"node.off()"(){
				},
				"node.once()"(){
				},
				"node.emit()"(){
				},
				"node.dispatch()"(){
				},
				"node.observe()"(){
				},
				"node.show()"(){
					const node = new Node();
				},
				"node.hide()"(){
					const node = new Node();
					node.hide();
					return node.hidden;
				},
				"node.toggleDisplay()"(){
					const node = new Node({hidden: true});
					node.show();
					return !node.hidden;
				},
				"node.checkVisibility()"(){
					const node = new Node();
					return !node.checkVisibility();
				},
				"node.click()"(){
					const node = new Node();
					node.click();
					return true;
				},
				"node.blur()"(){
					const node = new Node();
					node.blur();
					return true;
				},
				"node.focus()"(){
					const node = new Node();
					node.focus();
					return true;
				},
				"node.scroll()"(){
					const node = new Node();
					node.scroll(10,10);
					return true;
				},
				"node.scrollBy()"(){
					const node = new Node();
					node.scrollBy(10,10);
					return true;
				},
				"node.scrollTo()"(){
					const node = new Node();
					node.scrollTo(10,10);
					return true;
				},
				"node.scrollIntoView()"(){
					const node = new Node();
					node.scrollIntoView(10,10);
					return true;
				},
				"node.animate()"(){
					const node = new Node();
					node.animate({width: ['0px', '100px']});
					return true;
				},
				"node.requestFullscreen()"(){
					const node = new Node();
					node.requestFullscreen().catch(e=>{});
					return true;
				},
				"node.cssAll()"(){
					return (new Node()).cssAll() instanceof StylePropertyMapReadOnly;
				},
				"node.matches()"(){
					const node = new Node({class: 'name'});
					return node.matches('.name') && !node.matches('.error');
				},
				"node.closest()"(){
					const node1 = new Node({class: 'name'});
					const node2 = new Node({name: 'p'});
					const node3 = new Node();
					node1.ls = node2;
					node2.ls = node3;
					return (node3.closest('.name')===node1) && (node3.closest('p')===node2);
				},
				"node.isEqual()"(){
					const node1 = new Node();
					const node2 = new Node({tag: node1.tag});
					const node3 = new Node();
					return node1.isEqual(node2) && node1.isEqual(node3);
				},
				"node.isSame()"(){
					const node1 = new Node();
					const node2 = new Node({tag: node1.tag});
					const node3 = new Node();
					return node1.isSame(node2) && !node1.isSame(node3);
				},
				"node.contains()"(){
					const node1 = new Node();
					const node2 = new Node();
					node1.ls = node2;
					return node1.contains(node1) && node1.contains(node2) && !node1.contains(new Node());
				},
				"node.append()"(){
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node1.append(node2);
					node1.append(node3);
					return (node1.tag.firstChild === node2.tag)
						&& (node1.tag.lastChild === node3.tag)
				},
				"node.prepend()"(){
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node1.prepend(node2);
					node1.prepend(node3);
					return (node1.tag.firstChild === node3.tag)
						&& (node1.tag.lastChild === node2.tag)
				},
				"node.before()"(){
					const node1 = new Node();
					const node2 = new Node();
					node1.parent = new Node();
					node1.before(node2);
					return node1.prevNode === node2;
				},
				"node.after()"(){
					const node1 = new Node();
					const node2 = new Node();
					node1.parent = new Node();
					node1.after(node2);
					return node1.nextNode === node2;
				},
				"node.replace()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node1.parent = node0;
					node1.replace(node2, node3);
					return (node0.tag.firstChild === node2.tag)
						&& (node0.tag.lastChild === node3.tag)
				},
				"node.add()"(){
					const node = new Node();
					node.add({name: 's'});
					return node.tag.firstChild.tagName === 'S';
				},
				"node.remove()"(){
					const node0 = new Node();
					const node1 = new Node();
					node1.remove();
					return node1.parent === null;
				},
				"node.ls.length"(){
					const node = new Node();
					node.add({name: 's'});
					node.add({name: 's'});
					node.add({name: 's'});
					return node.ls.length === 3;
				},
				"node.ls.first"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					return node0.ls.first === node1;
				},
				"node.ls.last"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					return node0.ls.last === node3;
				},
				"node.ls.at()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					return (node0.ls.at(0) === node1) && (node0.ls.at(1) === node2);
				},
				"node.ls.replace()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1);
					node0.ls.replace(node2, node3);
					return (node0.ls.at(0) === node2) && (node0.ls.at(1) === node3);
				},
				"node.ls.clear()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					node0.ls.clear();
					return node0.ls.length === 0;
				},
				"node.ls.slice()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					console.log(node.ls.slice(5).toArray());
					return Eq(node.ls.slice(5), [n6, n7]);
				},
				"node.ls.splice()"(){
				},
				"node.ls.shift()"(){
				},
				"node.ls.pop()"(){
				},
				"node.ls.push()"(){
				},
				"node.ls.unshift()"(){
				},
				"node.ls.sort()"(){
				},
				"node.ls.reverse()"(){
				},
				"node.ls.shuffle()"(){},
				"node.ls.query(selector)"(){},
				"node.ls.queryAll(selector)"(){},
				"NodeIterator.from()"(){},
				"NodeIterator.of()"(){},
				"NodeIterator.wrap()"(){},
				"iterator.ls"(){},
				"iterator.all"(){},
				"iterator.drop()"(){},
				"iterator.every()"(){},
				"iterator.filter()"(){},
				"iterator.find()"(){},
				"iterator.flatMap()"(){},
				"iterator.forEach()"(){},
				"iterator.map()"(){},
				"iterator.reduce()"(){},
				"iterator.some()"(){},
				"iterator.take()"(){},
				"iterator.toArray()"(){},
				"iterator.count()"(){},
				"iterator.depth()"(){},
				"iterator.texts()"(){},
				"iterator.htmls()"(){},
				"iterator.on()"(){},
				"iterator.off()"(){},
				"iterator.once()"(){},
				"iterator.emit()"(){},
				"iterator.show()"(){},
				"iterator.hide()"(){},
				"iterator.toggleDisplay()"(){},
				"iterator.css()"(){},
				"iterator.appendCSS()"(){},
				"iterator.removeCSS()"(){},
				"iterator.clearCSS()"(){},
				"iterator.addClass()"(){},
				"iterator.removeClass()"(){},
				"iterator.toggleClass()"(){},
				"iterator.replaceClass()"(){},
				"iterator.clearClasses()"(){},
				"iterator.classes()"(){},
				"iterator.attr()"(){},
				"iterator.removeAttr()"(){},
				"iterator.toggleAttr()"(){},
				"iterator.clearAttrs()"(){},
				"iterator.text()"(){},
				"iterator.html()"(){},
				"iterator.add()"(){},
				"iterator.remove()"(){},
				"iterator.indexOf()"(){},
				"iterator.includes()"(){},
				"iterator.contains()"(){},
				"iterator.queryAll()"(){},
				"iterator.query()"(){},
				"iterator.filterClass()"(){},
				"iterator.filterTag()"(){},
				"iterator.filterVisible()"(){},
			});
			test.parent = document.body;
		</script>
	</head>
	<body>
		<h2>Run test</h2>
	</body>
</html>