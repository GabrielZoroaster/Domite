<!DOCTYPE html>
<html>
	<head>
		<title>Domite.UI Supports</title>
		<style>
			* {
				font-family: monofur, arial;
			}
			body {
				padding: 20px;
			}
			ul.test {
				display: grid;
				gap: 6px;
				padding: 0px;
			}
			ul.test > li {
				display: grid;
				border: 1px solid #aaa;
				border-radius: 8px;
				grid-template-columns: 1fr 200px;
				overflow: hidden;
			}
			ul.test > li.ok {
				border-color: #080;
			}
			ul.test > li.fail {
				border-color: #e00;
			}
			ul.test > li > .title {
				padding: 10px;
				grid-area: 1/1/2/2;
			}
			ul.test > li > .result {
				padding: 10px;
				grid-area: 1/2/2/3;
				color: #fff;
				font-weight: bold;
				align-content: center;
				justify-content: center;
				display: grid;
			}
			ul.test > li.ok > .result {
				background-color: #080;
			}
			ul.test > li.fail > .result {
				background-color: #e00;
			}
		</style>
		<script type="module">
			import * as ui from '../lib/node.js'
			import {Node, $, AttributeMap, NodeLS, NodeIterator} from '../lib/node.js'
			Object.assign(globalThis, {Node, $, ui});

			function * Nodes(args){
				while(true) yield new Node(args);
			}

			function Eq([... arr], [... arr1]){
				if(arr.length === arr1.length){
					for(let i = 0; i < arr.length; i++)
						if(arr[i] !== arr1[i])
							return false;
					return true;
				} return false;
			}

			class Test extends Node {

				#title = new Node({class: 'title'});
				#result = new Node({class: 'result'});

				constructor(title, test){
					super({name: 'li'});
					this.#title.text = title;
					this.append(this.#title, this.#result);
					this.run(test);
				}

				run(test){
					try {
						test() ? this.ok() : this.fail();
					} catch(error){
						this.catch(error);
						console.log(error);
					}
				}

				ok(){
					this.class.add('ok');
					this.#result.text = 'OK';
				}

				fail(){
					this.class.add('fail');
					this.#result.text = 'Fail';
				}

				catch(error){
					this.class.add('fail');
					this.#result.text = error.message;
				}
			}

			class TestList extends Node {

				constructor(tests){
					super({name: 'ul', class: 'test'});
					this.addAll(tests);
				}

				addAll(tests){
					for(const [title, test] of Object.entries(tests))
						this.add(title, test);
				}

				add(title, test){
					this.append(new Test(title, test));
				}
			}

			const test = new TestList({
				"Node.of()"(){
					const tag = document.createElement('div');
					const node = new Node({tag});
					return (Node.of(tag) === node) && (Node.of(1) === null);
				},
				"Node.hasNode()"(){
					const tag = document.createElement('div');
					const node = new Node({tag});
					return Node.hasNode(tag) && !Node.of(document.createElement('div'));
				},
				"Node.is()"(){
					return Node.is(new Node()) && !Node.is(1);
				},
				"Node.tag()"(){
					const tag = document.createElement('div');
					const node = new Node({tag});
					try {
						Node.tag({});
						return false;
					} catch {
						return (Node.tag(node) === tag);
					}
				},
				"Node.query()"(){
					const node = Node.query('body');
					return (node instanceof Node) && (Node.tag(node) === document.body);
				},
				"Node.queryAll()"(){
					const ls = Node.queryAll('body');
					const body = Node.of(document.body);
					return ls.includes(body);
				},
				"Node.wrap()"(){
					class TestNode extends Node {}
					const node = TestNode.wrap('body');
					return Node.of(document.body) instanceof TestNode;
				},
				"Node.wrapAll()"(){
					class TestNode extends Node {}
					const nodes = TestNode.wrapAll('h2');
					return nodes.every(n => n instanceof TestNode);
				},
				"new Node()"(){
					const node = new Node();
					return node instanceof Node;
				},
				"node.tag"(){
					const node = new Node();
					return node.tag instanceof HTMLElement;
				},
				"node.tagName"(){
					const node = new Node({name: 'p'});
					return node.tagName === 'P';
				},
				"node.document"(){
					const node = new Node();
					return node.document === document;
				},
				"node.parent"(){
					const node = new Node();
					return node.parent === null;
				},
				"node.parent = node"(){
					const node = new Node();
					const node1 = new Node();
					node.parent = node1;
					return node.tag.parentNode === node1.tag;
				},
				"node.parent = document.body"(){
					const node = new Node();
					node.parent = document.body;
					return node.tag.parentNode === document.body;
				},
				"node.parent = null"(){
					const node = new Node();
					node.parent = document.body;
					node.parent = null;
					return node.tag.parentNode === null;
				},
				"node.prevNode"(){
					return (new Node()).prevNode === null;
				},
				"node.prevNode = node"(){
					const node = new Node();
					const node1 = new Node();
					node.parent = new Node();
					node.prevNode = node1;
					return node.tag.previousElementSibling === node1.tag;
				},
				"node.nextNode"(){
					return (new Node()).nextNode === null;
				},
				"node.nextNode = node"(){
					const node = new Node();
					const node1 = new Node();
					node.parent = new Node();
					node.nextNode = node1;
					return node.tag.nextElementSibling === node1.tag;
				},
				"node.hidden"(){
					return (new Node()).hidden === false;
				},
				"node.hidden = true"(){
					const node = new Node();
					node.hidden = true;
					return node.tag.hasAttribute('hidden');
				},
				"node.hidden = false"(){
					const node = new Node();
					node.hidden = true;
					node.hidden = false;
					return !node.tag.hasAttribute('hidden');
				},
				"node.class"(){
					return (new Node()).class instanceof DOMTokenList;
				},
				"node.class = 'name'"(){
					const node = new Node();
					node.class = 'name';
					return node.class.contains('name');
				},
				"node.class = []"(){
					const node = new Node();
					node.class = 'name';
					node.class = ['a', 'b'];
					return !node.class.contains('name')
						&& node.class.contains('a')
						&& node.class.contains('b')
					;
				},
				"node.style"(){
					const node = new Node();
					return node.style instanceof CSSStyleDeclaration;
				},
				"node.style = 'css'"(){
					const node = new Node();
					node.style = 'width: 100px; color: blue';
					return (node.style.width === '100px') && (node.style.color === 'blue');
				},
				"node.style = {}"(){
					const node = new Node();
					node.style = 'width: 100px; color: blue';
					node.style = {color: 'red', height: '10%'};
					return (node.style.height === '10%') && (node.style.color === 'red') && !node.style.width;
				},
				"node.css"(){
					return (new Node()).css instanceof StylePropertyMap;
				},
				"node.dataset"(){
					return (new Node()).dataset instanceof DOMStringMap;
				},
				"node.dataset = {}"(){
					const node = new Node();
					node.dataset = {user: '123', ID: 12};
					return (node.dataset.user === '123') && (node.dataset.ID === '12');
				},
				"node.attrs"(){
					return (new Node()).attrs instanceof AttributeMap;
				},
				"node.attrs = {}"(){
					const node = new Node();
					node.attrs = {id: 'apple', title: 'Any'};
					return (node.tag.id === 'apple') && (node.tag.title === 'Any');
				},
				"node.html"(){
					return (new Node()).html === '';
				},
				"node.html = ''"(){
					const node = new Node();
					node.html = '<p>123</p>';
					return node.tag.innerHTML === '<p>123</p>';
				},
				"node.text"(){
					return (new Node()).text === '';
				},
				"node.text = ''"(){
					const node = new Node();
					node.html = 'Apple';
					return node.tag.innerText === 'Apple';
				},
				"node.ls"(){
					return (new Node()).ls instanceof NodeLS;
				},
				"node.ls = node"(){
					const node = new Node();
					const node1 = new Node();
					node.ls = node1;
					return node.tag.firstChild === node1.tag;
				},
				"node.ls = element"(){
					const node = new Node();
					const tag1 = document.createElement('p');
					node.ls = tag1;
					return node.tag.firstChild === tag1;
				},
				"node.ls = {}"(){
					const node = new Node();
					node.ls = {name: 'i'};
					return node.tag.firstChild.tagName === 'I';
				},
				"node.ls = [node, element, {}]"(){
					const node = new Node();
					const node1 = new Node();
					const tag1 = document.createElement('p');
					const obj1 = {name: 'b'};
					node.ls = [node1, tag1, obj1];
					return (node.tag.children[0] === node1.tag)
						&& (node.tag.children[1] === tag1)
						&& (node.tag.children[2].tagName === 'B')
					;
				},
				"node.all"(){
					const node = new Node();
					return node.all instanceof NodeIterator;
				},
				"node.parentAll"(){
					const node = new Node({hidden: true});
					return node.parentAll instanceof NodeIterator;
				},
				"node.prevAll"(){
					const node = new Node({hidden: true});
					return node.prevAll instanceof NodeIterator;
				},
				"node.nextAll"(){
					const node = new Node({hidden: true});
					return node.nextAll instanceof NodeIterator;
				},
				"node.vp"(){
					const node = new Node();
					return node.vp instanceof DOMRect;
				},
				"node.abs"(){
					const node = new Node();
					return node.vp instanceof DOMRect;
				},
				"node.rel"(){
					const node = new Node();
					return node.vp;
				},
				"node.box"(){
					const node = new Node();
					return node.box;
				},
				"node.scr"(){
					const node = new Node();
					return node.scr;
				},
				"node.on()"(){
					const node = new Node();
					let result = 0;
					node.on('click', () => result=1);
					node.emit('click');
					return result;
				},
				"node.off()"(){
					const node = new Node();
					let result = 0;
					function on(){ result=1 }
					node.on('click', on);
					node.off('click', on);
					node.emit('click');
					return !result;
				},
				"node.once()"(){
					const node = new Node();
					let result = 0;
					node.once('click', () => result++);
					node.emit('click');
					node.emit('click');
					node.emit('click');
					return result === 1;
				},
				"node.emit()"(){
					const node = new Node();
					return node === node.emit('click');
				},
				"node.dispatch()"(){
					const node = new Node();
					return node === node.dispatch(new Event('click'));
				},
				"node.observe()"(){
					let count = 0;
					const node = new Node();
					node.append({}, {}, {});
					node.observe({childList: true}, r => count=r);
					node.ls.clear();
					return true;
				},
				"node.show()"(){
					const node = new Node({hidden: true});
					node.show();
					return !node.hidden;
				},
				"node.hide()"(){
					const node = new Node();
					node.hide();
					return node.hidden;
				},
				"node.toggleDisplay()"(){
					const node = new Node({hidden: true});
					node.show();
					return !node.hidden;
				},
				"node.checkVisibility()"(){
					const node = new Node();
					return !node.checkVisibility();
				},
				"node.click()"(){
					const node = new Node();
					node.click();
					return true;
				},
				"node.blur()"(){
					const node = new Node();
					node.blur();
					return true;
				},
				"node.focus()"(){
					const node = new Node();
					node.focus();
					return true;
				},
				"node.scroll()"(){
					const node = new Node();
					node.scroll(10,10);
					return true;
				},
				"node.scrollBy()"(){
					const node = new Node();
					node.scrollBy(10,10);
					return true;
				},
				"node.scrollTo()"(){
					const node = new Node();
					node.scrollTo(10,10);
					return true;
				},
				"node.scrollIntoView()"(){
					const node = new Node();
					node.scrollIntoView(10,10);
					return true;
				},
				"node.animate()"(){
					const node = new Node();
					node.animate({width: ['0px', '100px']});
					return true;
				},
				"node.requestFullscreen()"(){
					const node = new Node();
					node.requestFullscreen().catch(e=>{});
					return true;
				},
				"node.cssAll()"(){
					return (new Node()).cssAll() instanceof StylePropertyMapReadOnly;
				},
				"node.matches()"(){
					const node = new Node({class: 'name'});
					return node.matches('.name') && !node.matches('.error');
				},
				"node.closest()"(){
					const node1 = new Node({class: 'name'});
					const node2 = new Node({name: 'p'});
					const node3 = new Node();
					node1.ls = node2;
					node2.ls = node3;
					return (node3.closest('.name')===node1) && (node3.closest('p')===node2);
				},
				"node.isEqual()"(){
					const node1 = new Node();
					const node2 = new Node({tag: node1.tag});
					const node3 = new Node();
					return node1.isEqual(node2) && node1.isEqual(node3);
				},
				"node.isSame()"(){
					const node1 = new Node();
					const node2 = new Node({tag: node1.tag});
					const node3 = new Node();
					return node1.isSame(node2) && !node1.isSame(node3);
				},
				"node.contains()"(){
					const node1 = new Node();
					const node2 = new Node();
					node1.ls = node2;
					return node1.contains(node1) && node1.contains(node2) && !node1.contains(new Node());
				},
				"node.append()"(){
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node1.append(node2);
					node1.append(node3);
					return (node1.tag.firstChild === node2.tag)
						&& (node1.tag.lastChild === node3.tag)
				},
				"node.prepend()"(){
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node1.prepend(node2);
					node1.prepend(node3);
					return (node1.tag.firstChild === node3.tag)
						&& (node1.tag.lastChild === node2.tag)
				},
				"node.before()"(){
					const node1 = new Node();
					const node2 = new Node();
					node1.parent = new Node();
					node1.before(node2);
					return node1.prevNode === node2;
				},
				"node.after()"(){
					const node1 = new Node();
					const node2 = new Node();
					node1.parent = new Node();
					node1.after(node2);
					return node1.nextNode === node2;
				},
				"node.replace()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node1.parent = node0;
					node1.replace(node2, node3);
					return (node0.tag.firstChild === node2.tag)
						&& (node0.tag.lastChild === node3.tag)
				},
				"node.add()"(){
					const node = new Node();
					node.add({name: 's'});
					return node.tag.firstChild.tagName === 'S';
				},
				"node.remove()"(){
					const node0 = new Node();
					const node1 = new Node();
					node1.remove();
					return node1.parent === null;
				},
				"node.ls.length"(){
					const node = new Node();
					node.add({name: 's'});
					node.add({name: 's'});
					node.add({name: 's'});
					return node.ls.length === 3;
				},
				"node.ls.first"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					return node0.ls.first === node1;
				},
				"node.ls.last"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					return node0.ls.last === node3;
				},
				"node.ls.at()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					return (node0.ls.at(0) === node1) && (node0.ls.at(1) === node2);
				},
				"node.ls.replace()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1);
					node0.ls.replace(node2, node3);
					return (node0.ls.at(0) === node2) && (node0.ls.at(1) === node3);
				},
				"node.ls.clear()"(){
					const node0 = new Node();
					const node1 = new Node();
					const node2 = new Node();
					const node3 = new Node();
					node0.append(node1, node2, node3);
					node0.ls.clear();
					return node0.ls.length === 0;
				},
				"node.ls.slice()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					return Eq(node.ls.slice(5), [n6, n7])
						&& Eq(node.ls.slice(-2), [n6, n7])
						&& Eq(node.ls.slice(3, 5), [n4, n5])
						&& Eq(node.ls.slice(3, -1), [n4, n5, n6])
					;
				},
				"node.ls.splice()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					return Eq(node.ls.splice(2, 2), [n3, n4])
						&& Eq(node.ls, [n1, n2, n5, n6, n7])
				},
				"node.ls.shift()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					return (node.ls.shift() === n1)
						&& (node.ls.shift() === n2)
						&& Eq(node.ls, [n3, n4, n5, n6, n7])
				},
				"node.ls.pop()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					return (node.ls.pop() === n7)
						&& (node.ls.pop() === n6)
						&& Eq(node.ls, [n1, n2, n3, n4, n5])
				},
				"node.ls.push()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					return (node.ls.push(n1, n2) === 2)
						&& (node.ls.push(n3) === 1)
						&& Eq(node.ls, [n1, n2, n3])
				},
				"node.ls.unshift()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					return (node.ls.unshift(n1, n2) === 2)
						&& (node.ls.unshift(n3) === 1)
						&& Eq(node.ls, [n3, n1, n2])
				},
				"node.ls.sort()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					n1.text = 'banana';
					n2.text = 'apple';
					n3.text = 'sex';
					n4.text = 'love';
					n5.text = 'sun';
					n6.text = 'human';
					n7.text = 'cat';
					return (node.ls.sort() === node.ls)
						&& Eq(node.ls, [n2, n1, n7, n6, n4, n3, n5])
				},
				"node.ls.reverse()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					return (node.ls.reverse() === node.ls)
						&& Eq(node.ls, [n7, n6, n5, n4, n3, n2, n1])
				},
				"node.ls.shuffle()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6, n7];
					return (node.ls.shuffle() === node.ls);
				},
				"node.ls.query(selector)"(){
					const node = new Node();
					const n1 = node.add();
					const n2 = node.add({class: 'target'});
					const n3 = node.add({class: 'target'});
					return (node.ls.query('.target') === n2)
						&& (node.ls.query('div') === n1)
						&& (node.ls.query('.no') === null)
				},
				"node.ls.queryAll(selector)"(){
					const node = new Node({class: 'target'});
					const n1 = node.add();
					const n2 = node.add({class: 'target'});
					const n3 = node.add({class: 'target'});
					const n4 = n2.add();
					const n5 = n3.add({class: 'target'});
					const n6 = n3.add();
					const n7 = n3.add({class: 'target'});
					return Eq(node.ls.queryAll('.target'), [n2, n3, n5, n7]);
				},
				"NodeIterator.from()"(){
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const iter = NodeIterator.from([n1, n2, n3, n4, n5, n6, n7]);
					return (iter instanceof NodeIterator)
						&& Eq(iter, [n1, n2, n3, n4, n5, n6, n7])
				},
				"NodeIterator.of()"(){
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const iter = NodeIterator.of(n1, n2, n3, n4, n5, n6, n7);
					return (iter instanceof NodeIterator)
						&& Eq(iter, [n1, n2, n3, n4, n5, n6, n7])
				},
				"NodeIterator.wrap()"(){
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const iter = NodeIterator.wrap([n1.tag, n2.tag, n3.tag, n4.tag, n5.tag, n6.tag, n7.tag]);
					return (iter instanceof NodeIterator)
						&& Eq(iter, [n1, n2, n3, n4, n5, n6, n7])
				},
				"iterator.ls"(){
					return (new Node()).ls.ls.ls instanceof NodeIterator;
				},
				"iterator.all"(){
					return (new Node()).ls.ls.all instanceof NodeIterator;
				},
				"iterator.drop()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const iter = NodeIterator.of(n1, n2, n3, n4, n5, n6, n7);
					return Eq(iter.drop(4), [n5, n6, n7]);
				},
				"iterator.every()"(){
					const node = new Node();
					node.add({name: 'a'});
					node.add({name: 'a'});
					node.add({name: 'b'});
					node.add({name: 'a'});
					node.add({name: 'i'});
					node.add({name: 'a'});
					node.add({name: 'b'});
					return node.ls.every(n => n.ls.length === 0)
						!node.ls.every(n => n.tagName !== 'i');
				},
				"iterator.filter()"(){
					const node = new Node();
					const n1 = node.add({name: 'div'});
					const n2 = node.add({name: 'span'});
					const n3 = node.add({name: 'a'});
					const n4 = node.add({name: 'nav'});
					const n5 = node.add({name: 'table'});
					const n6 = node.add({name: 'main'});
					return Eq(node.ls.filter(n => n.tagName.length!==4), [n1, n3, n4, n5]);
				},
				"iterator.find()"(){
					const node = new Node();
					const n1 = node.add({name: 'div'});
					const n2 = node.add({name: 'span'});
					const n3 = node.add({name: 'a'});
					const n4 = node.add({name: 'nav'});
					const n5 = node.add({name: 'table'});
					const n6 = node.add({name: 'main'});
					return (node.ls.find(n => n.tagName == 'NAV')===n4)
						&& (node.ls.find(n => n.tagName == 'MAIN')===n6)
						&& (node.ls.find(n => n.tagName == 'UL')===null)
				},
				"iterator.flatMap()"(){
					const node = new Node();
					const n1 = node.add({name: 'div'});
					const n2 = node.add({name: 'span'});
					const n3 = node.add({name: 'a'});
					const n4 = node.add({name: 'nav'});
					const n5 = node.add({name: 'table'});
					const n6 = node.add({name: 'main'});
					return Eq(node.ls.flatMap((n, i) => [n, n.tagName, i]),
						[n1, 'DIV', 0, n2, 'SPAN', 1, n3, 'A', 2, n4, 'NAV', 3, n5, 'TABLE', 4, n6, 'MAIN', 5]);
				},
				"iterator.forEach()"(){
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const all = new Set([n1, n2, n3, n4, n5, n6, n7]);
					const iter = NodeIterator.from([n1, n2, n3, n4, n5, n6, n7]);
					iter.forEach(n => all.delete(n));
					return all.size === 0;
				},
				"iterator.map()"(){
					const node = new Node();
					const n1 = node.add({name: 'div'});
					const n2 = node.add({name: 'span'});
					const n3 = node.add({name: 'a'});
					const n4 = node.add({name: 'nav'});
					const n5 = node.add({name: 'table'});
					const n6 = node.add({name: 'main'});
					return Eq(node.ls.map(n => n.tagName[0]), ['D', 'S', 'A', 'N', 'T', 'M']);
				},
				"iterator.reduce()"(){
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const iter = NodeIterator.from([n1, n2, n3, n4, n5, n6, n7]);
					return Eq(iter.reduce((a, b) => {
						a.push(b);
						return a;
					}, []), [n1, n2, n3, n4, n5, n6, n7])
				},
				"iterator.some()"(){
					const node = new Node();
					node.add({name: 'a'});
					node.add({name: 'a'});
					node.add({name: 'b'});
					node.add({name: 'a'});
					node.add({name: 'i'});
					node.add({name: 'a'});
					node.add({name: 'b'});
					return node.ls.some(n => n.tagName === 'I')
						!node.ls.every(n => n.tagName === 'DIV');
				},
				"iterator.take()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const iter = NodeIterator.of(n1, n2, n3, n4, n5, n6, n7);
					return Eq(iter.take(4), [n1, n2, n3, n4]);
				},
				"iterator.toArray()"(){
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					const iter = NodeIterator.of(n1, n2, n3, n4, n5, n6, n7);
					const arr = iter.toArray();
					return Array.isArray(arr) && Eq(arr, [n1, n2, n3, n4, n5, n6, n7]);
				},
				"iterator.count()"(){
					const node = new Node();
					node.add({name: 'a'});
					node.add({name: 'a'});
					node.add({name: 'b'});
					node.add({name: 'a'});
					node.add({name: 'i'});
					node.add({name: 'a'});
					node.add({name: 'b'});
					return node.ls.filter(n => n.tagName==='A').count() === 4;
				},
				"iterator.depth()"(){
					return $({
						ls: [{ls: [{}, {}]}, {ls: []}, {ls: [{}, {}, {ls: [{}]}]}, {}, {ls: [{}, {}]}, {}]
					}).depth() === 4;
				},
				"iterator.texts()"(){
					const node = new Node();
					node.add({text: 'Apple'});
					node.add({text: 'Banana'});
					node.add({text: 'Age'});
					return Eq(node.ls.texts(), ['Apple', 'Banana', 'Age']);
				},
				"iterator.htmls()"(){
					const node = new Node();
					node.add({ls: {name: 'b', text: 'Apple'}});
					node.add({text: 'Banana'});
					node.add({text: 'Age'});
					return Eq(node.ls.htmls(), ['<b>Apple</b>', 'Banana', 'Age']);
				},
				"iterator.on()"(){
					const node = new Node();
					node.append({}, {}, {});
					let count = 0;
					node.ls.on('click', () => count++);
					node.ls.emit('click');
					return count === 3;
				},
				"iterator.off()"(){
					let count = 0;
					function inc(){count++}
					const node = new Node();
					node.append({}, {}, {});
					node.ls.on('click', inc);
					node.ls.off('click', inc);
					node.ls.emit('click');
					return count === 0;
				},
				"iterator.once()"(){
					let count = 0;
					const node = new Node();
					node.append({}, {}, {});
					node.ls.once('click', () => count++);
					node.ls.emit('click');
					node.ls.emit('click');
					node.ls.emit('click');
					return count === 3;
				},
				"iterator.emit()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.emit('click');
					return true;
				},
				"iterator.show()"(){
					const node = new Node();
					node.add({hidden: 1});
					node.add({});
					node.add({hidden: 1});
					node.add({hidden: 1});
					node.ls.show();
					return !node.ls.some(n => n.hidden);
				},
				"iterator.hide()"(){
					const node = new Node();
					node.add({hidden: 1});
					node.add({});
					node.add({hidden: 1});
					node.add({hidden: 1});
					node.ls.hide();
					return node.ls.every(n => n.hidden);
				},
				"iterator.toggleDisplay()"(){
					const node = new Node();
					node.add({hidden: 1});
					node.add({});
					node.add({hidden: 1});
					node.add({hidden: 1});
					node.ls.toggleDisplay();
					return Eq(node.ls.map(n=>n.hidden), [false, true, false, false]);
				},
				"iterator.css()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.css('width', '100px');
					return node.ls.every(node => node.style.width==='100px');
				},
				"iterator.appendCSS()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.appendCSS('background-image', 'url(/res/img.png)');
					return node.ls.every(node => node.style.backgroundImage==='url("/res/img.png")');
				},
				"iterator.removeCSS()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.css('width', '100px');
					node.ls.remove('width');
					return node.ls.every(node => node.style.width==='');
				},
				"iterator.clearCSS()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.css('width', '100px');
					node.ls.clearCSS();
					return node.ls.every(node => node.style.width==='');
				},
				"iterator.addClass()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.addClass('selected');
					return !node.ls.query(':not(.selected)');
				},
				"iterator.removeClass()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.addClass('selected');
					node.ls.removeClass('selected');
					return !node.ls.query('.selected');
				},
				"iterator.toggleClass()"(){
					const node = new Node();
					node.append({}, {class: 'selected'}, {});
					node.ls.toggleClass('selected');
					return Eq(node.ls.map(n=>String(n.class)), ['selected', '', 'selected']);
				},
				"iterator.replaceClass()"(){
					const node = new Node();
					node.append({}, {class: 'selected'}, {});
					node.ls.replaceClass('selected', 'ignore');
					return Eq(node.ls.map(n=>String(n.class)), ['', 'ignore', '']);
				},
				"iterator.clearClasses()"(){
					const node = new Node();
					node.append({class: 'ignore selected'}, {class: 'selected'}, {});
					node.ls.clearClasses();
					return node.ls.every(n=>n.class.length<1)
				},
				"iterator.classes()"(){
					const node = new Node();
					node.append({class: 'apple banana'}, {class: 'love'}, {});
					return Eq(node.ls.classes(), ['apple', 'banana', 'love']);
				},
				"iterator.attr()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.attr('title', 'Apple');
					return node.ls.every(n=>n.tag.title=='Apple');
				},
				"iterator.removeAttr()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.attr('title', 'Apple');
					node.ls.removeAttr('title');
					return node.ls.every(n=>n.tag.title=='');
				},
				"iterator.toggleAttr()"(){
					const node = new Node();
					node.append({}, {attrs: {autofocus: ''}}, {});
					node.parent = document.body;
					node.ls.toggleAttr('autofocus');
					return Eq(node.ls.map(n => n.tag.autofocus), [true, false, true]);
				},
				"iterator.clearAttrs()"(){
					const node = new Node();
					node.append({lang: 'en'}, {attrs: {title: 'Apple', id: 'x12'}}, {id: 'x33'});
					node.ls.clearAttrs();
					return node.ls.every(n => n.attrs.length < 1);
				},
				"iterator.text()"(){
					const node = new Node();
					node.append({text: 'Sex'}, {text: 'Apple'}, {text: 'Cat'});
					node.ls.text(t => t.toLowerCase());
					return Eq(node.ls.texts(), ['sex', 'apple', 'cat']);
				},
				"iterator.html()"(){
					const node = new Node();
					node.append({text: 'Sex'}, {text: 'Apple'}, {text: 'Cat'});
					node.ls.html(t => `<B>${t}</B>`);
					return Eq(node.ls.htmls(), ['<b>Sex</b>', '<b>Apple</b>', '<b>Cat</b>']);
				},
				"iterator.add()"(){
					const node = new Node({name: 'i'});
					node.append({name: 's'}, {name: 's'}, {name: 's'});
					node.ls.add({name: 'b', text: 'Apple'});
					node.ls.add({name: 'a', text: 'Apple'});
					return node.all.every(n => n.tagName.length===1);
				},
				"iterator.remove()"(){
					const node = new Node();
					node.append({}, {}, {});
					node.ls.remove();
					return node.ls.length === 0;
				},
				"iterator.indexOf()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6];
					return (node.ls.indexOf(n4)===3) && (node.ls.indexOf(n7)===-1);
				},
				"iterator.includes()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6];
					return node.all.includes(n4) && !node.ls.includes(n7);
				},
				"iterator.contains()"(){
					const node = new Node();
					const [n1, n2, n3, n4, n5, n6, n7] = Nodes();
					node.ls = [n1, n2, n3, n4, n5, n6];
					n4.append(n7);
					return node.all.contains(n4) && node.ls.contains(n7);
				},
				"iterator.matchAll()"(){
					const node = new Node();
					const n1 = node.add({class: 'target'});
					const n2 = node.add({class: 'selected'});
					const n3 = node.add({class: 'target selected'});
					return Eq(node.ls.matchAll('.target'), [n1, n3]);
				},
				"iterator.match()"(){
					const node = new Node();
					const n1 = node.add({class: 'target'});
					const n2 = node.add({class: 'selected'});
					const n3 = node.add({class: 'target selected'});
					return (node.ls.match('.selected') === n2)
						&& (node.ls.match('.ignore') === null)
				},
				"iterator.filterClass()"(){
					const node = new Node();
					const n1 = node.add({class: 'target'});
					const n2 = node.add({class: 'selected'});
					const n3 = node.add({class: 'target selected'});
					return Eq(node.ls.filterClass('target'), [n1, n3]);
				},
				"iterator.filterTag()"(){
					const node = new Node();
					const n1 = node.add({name: 'b'});
					const n2 = node.add({name: 'a'});
					const n3 = node.add({name: 'b'});
					return Eq(node.ls.filterTag('b'), [n1, n3]);
				},
				"iterator.filterVisible()"(){
					const node = new Node();
					const n1 = node.add({});
					const n2 = node.add({hidden: true});
					const n3 = node.add({});
					return Eq(node.ls.filterVisible(), []);
				},
			});
			test.parent = document.body;
		</script>
	</head>
	<body>
		<h2>Run test</h2>
	</body>
</html>